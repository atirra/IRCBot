TinyBot is a basic IRC Bot, which is extentable by plugins.
Version 1.0

- Dependicies - 

This implemention uses TinyIRC v0.7 as IRC Parser and Libev v4.15.

TinyIRC should be provided with this Bot, if not it might be downloaded at www.julianloehr.de.
To dwnload Libev visit libev.schmorp.de.


This implemention uses the C++11 standart, therefore a modern compilier with C++11 support is needed.


- How to Build - 

You might use the given Makefile. It assumes that the TinyIRC sources are in the same parent folder. If so TinyIRC is made and copied, if not the TinyIRC library should be installed on the system or placed with its headers in the include and lib folder.

The compiler does need the "std=c++11", further compiler flags are "Wall" and "gdb" for debug purposes.
The Linker does need the libev, libtinyirc and libdl. Last is needed for the Plugin mechanism.

It recommended to change the Makefile for your needs or write a complete new one.


- How to build Plugins -

Current Interface Version 1010

Plugins are simple dynamic libraries. You have to implement the following interfaces ("IServerInterface" and "IChannelInterface") and functions ("GetPluginInterfaceVersion", "CreateServerInterface" and "FreeServerInterface") and build your plugin around them. After compiling and building the dynamic library, you provide TinyBot the file path on execution per command line paramenter. TinyBot loads the binary at the given path und first checks the Version via "GetPluginInterfaceVersion"-Function. Then one "IServerInterface"-Instance is created per Server Connection via the "CreateServerInterface"-Function. Furthermore per Channel a "IChannelInterface"-Instance is requested per "GetChannelInterface"-Method from the "IServerInterface"-Instance. Then while running the Interface-Event-Methods are called per incomming Message. When shutting down the Bot the "IServerInterface"-Instances are freed with the "FreeServerInterface"-Function. This call has to ensure that all "IChannelInterfaces"-Instances requested from this "IServerInterface"-Instance are freed as well. The TinyBot-Implemention guarantees that no "IChanneInterface"-Instance nor the freed "IServerInterface"-Instance is accessed after that call.

*** Plugin Interfaces and Functions ***

// Return the used Interface Version as integer. Currently "1010"
int GetPluginInterfaceVersion();

// Returns a new Instance of the implemented IServerInterface
IServerInterface * CreateServerInterface(const std::string & ServerAdress, const std::string & Botname);

// Frees the IServerInterface and all its IChannelInterface childrens
void FreeServerInterface (IServerInterface * Instance);

class IServerInterface
{
public:
	virtual ~IServerInterface() {};

	virtual IChannelInterface & GetChannelInterface(const std::string & ChannelName) = 0;

	//Server Events
	virtual void OnWelcome		(const std::string & WelcomeMesage, IResponseInterface & Response) = 0;
	virtual void OnMOTD			(const std::string & MessageOfTheDay, IResponseInterface & Response) = 0;
	virtual void OnPrvtMessage	(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & Message, IResponseInterface & Response) = 0;
	virtual void OnNotice		(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & Message, IResponseInterface & Response) = 0;
	virtual void OnUserMode		(const std::string & Nick, const std::string & User, const std::string & Host, const char Mode, const bool Set, IResponseInterface & Response) = 0;

	virtual void OnShutdown		(IResponseInterface & Response) = 0;
	virtual void OnDisconnect	() = 0;

};

class IChannelInterface
{
public:
	virtual ~IChannelInterface() {};

	//Channel Events
	virtual void OnUserList	(const std::vector<std::string> & UserList, IResponseInterface & Response) = 0;
	virtual void OnTopic	(const std::string & Topic, IResponseInterface & Response) = 0;
	virtual void OnChannelMode	(const std::string & Nick, const std::string & User, const std::string & Host, const char Mode, const bool Set, const std::string & Param, IResponseInterface & Response) = 0;

	virtual void OnJoin		(const std::string & Nick, const std::string & User, const std::string & Host, IResponseInterface & Response) = 0;
	virtual void OnPart		(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & Message, IResponseInterface & Response) = 0;
	virtual void OnQuit		(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & Message, IResponseInterface & Response) = 0;
	virtual void OnKick		(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & Victim, const std::string & Reason, IResponseInterface & Response) = 0;
	virtual void OnNickChange	(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & NewNick, IResponseInterface & Response) = 0;
	virtual void OnChangedTopic	(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & NewTopic, IResponseInterface & Response) = 0;

	virtual void OnNotice	(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & Message, IResponseInterface & Response) = 0;
	virtual void OnMessage	(const std::string & Nick, const std::string & User, const std::string & Host, const std::string & Message, IResponseInterface & Response) = 0;
};

// An Interface to accsses the Server Connection and send a Response to the Server
// No need to implement! The Instance is provided by the calling TinyBot.
class IResponseInterface
{
public:
	virtual ~IResponseInterface() {};

	virtual void SendMessage(const std::string & Reciever, const std::string & Message) = 0;
};